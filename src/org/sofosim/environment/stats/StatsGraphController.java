/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StatsGraphController.java
 *
 * Created on Oct 28, 2011, 2:42:44 PM
 */
package org.sofosim.environment.stats;

import javax.swing.JOptionPane;

/**
 *
 * @author cfrantz
 */
public class StatsGraphController extends javax.swing.JFrame {

    private Statistics stats = null;
    
    /** Creates new form StatsGraphController */
    public StatsGraphController(Statistics stats) {
    	this.stats = stats;
    	initComponents();
    	//checkForChangedSimulationSettings();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnResetGraphs = new javax.swing.JButton();
        lblStatsGraphController = new javax.swing.JLabel();
        btnUpdateStats = new javax.swing.JButton();
        btnAutoUpdateGraphs = new javax.swing.JToggleButton();
        btnRunStats = new javax.swing.JToggleButton();
        btnPrintGraphsToPDF = new javax.swing.JButton();
        btnAutoPrintGraphs = new javax.swing.JToggleButton();
        txtPrintRoundsEveryXRounds = new javax.swing.JTextField();
        lblRoundsAutoPrint = new javax.swing.JLabel();
        lblEveryAutoPrint = new javax.swing.JLabel();
        btnDataCulling = new javax.swing.JToggleButton();
        txtMaxCullingEntries = new javax.swing.JTextField();
        lblMaxEntries = new javax.swing.JLabel();
        btnAutoRunPeriodicMethod = new javax.swing.JToggleButton();
        lblEveryAutoRunMethod = new javax.swing.JLabel();
        txtAutoRunMethod = new javax.swing.JTextField();
        lblRoundsAutoRunMethod = new javax.swing.JLabel();
        btnAutoSaveStats = new javax.swing.JToggleButton();
        lblEveryAutoSave = new javax.swing.JLabel();
        txtSaveStatsEveryXRounds = new javax.swing.JTextField();
        lblRoundsAutoSave = new javax.swing.JLabel();
        btnAutoWriteData = new javax.swing.JToggleButton();
        txtWriteDataEveryXRounds = new javax.swing.JTextField();
        lblEveryAutoWrite = new javax.swing.JLabel();
        lblRoundsAutoWrite = new javax.swing.JLabel();
        txtUpdateGraphEveryXRounds = new javax.swing.JTextField();
        lblEveryUpdateGraphs = new javax.swing.JLabel();
        lblRoundsUpdateGraphs = new javax.swing.JLabel();

        setTitle("Stats Graph Controller");
        setResizable(false);

        btnResetGraphs.setText("Reset Graphs");
        btnResetGraphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetGraphsActionPerformed(evt);
            }
        });

        lblStatsGraphController.setText("Stats Graph Controller");

        btnUpdateStats.setText("Update Stats");
        btnUpdateStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStatsActionPerformed(evt);
            }
        });

        btnAutoUpdateGraphs.setText("Auto-Update Graphs");
        btnAutoUpdateGraphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoUpdateGraphsActionPerformed(evt);
            }
        });

        btnRunStats.setText("Activate Statistics (including graphs)");
        btnRunStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunStatsActionPerformed(evt);
            }
        });

        btnPrintGraphsToPDF.setText("Print Graphs now");
        btnPrintGraphsToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintGraphsToPDFActionPerformed(evt);
            }
        });

        btnAutoPrintGraphs.setText("Auto-Print Graphs");
        btnAutoPrintGraphs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoPrintGraphsActionPerformed(evt);
            }
        });

        txtPrintRoundsEveryXRounds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrintRoundsEveryXRoundsKeyReleased(evt);
            }
        });

        lblRoundsAutoPrint.setText("rounds");

        lblEveryAutoPrint.setText("every");

        btnDataCulling.setText("Dyn. data culling");
        btnDataCulling.setEnabled(false);
        btnDataCulling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataCullingActionPerformed(evt);
            }
        });

        txtMaxCullingEntries.setText("1000");
        txtMaxCullingEntries.setEnabled(false);
        txtMaxCullingEntries.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMaxCullingEntriesKeyReleased(evt);
            }
        });

        lblMaxEntries.setText("max. entries:");
        lblMaxEntries.setEnabled(false);

        btnAutoRunPeriodicMethod.setText("Auto-run periodic method");
        btnAutoRunPeriodicMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoRunPeriodicMethodActionPerformed(evt);
            }
        });

        lblEveryAutoRunMethod.setText("every");

        txtAutoRunMethod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAutoRunMethodKeyReleased(evt);
            }
        });

        lblRoundsAutoRunMethod.setText("rounds");

        btnAutoSaveStats.setText("Auto-Save Stats Form");
        btnAutoSaveStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoSaveStatsActionPerformed(evt);
            }
        });

        lblEveryAutoSave.setText("every");

        txtSaveStatsEveryXRounds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSaveStatsEveryXRoundsKeyReleased(evt);
            }
        });

        lblRoundsAutoSave.setText("rounds");

        btnAutoWriteData.setText("Auto-Collect Data for CSV file");
        btnAutoWriteData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoWriteDataActionPerformed(evt);
            }
        });

        txtWriteDataEveryXRounds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWriteDataEveryXRoundsKeyReleased(evt);
            }
        });

        lblEveryAutoWrite.setText("every");

        lblRoundsAutoWrite.setText("rounds");

        txtUpdateGraphEveryXRounds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUpdateGraphEveryXRoundsKeyReleased(evt);
            }
        });

        lblEveryUpdateGraphs.setText("every");

        lblRoundsUpdateGraphs.setText("rounds");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblStatsGraphController)
                .addGap(140, 140, 140))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDataCulling)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblMaxEntries)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMaxCullingEntries, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnAutoRunPeriodicMethod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAutoSaveStats, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAutoWriteData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEveryAutoSave)
                                    .addComponent(lblEveryAutoWrite)
                                    .addComponent(lblEveryAutoRunMethod, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtAutoRunMethod)
                                    .addComponent(txtSaveStatsEveryXRounds, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                                    .addComponent(txtWriteDataEveryXRounds))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoundsAutoRunMethod)
                                    .addComponent(lblRoundsAutoSave)
                                    .addComponent(lblRoundsAutoWrite))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAutoPrintGraphs, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEveryAutoPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPrintRoundsEveryXRounds, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblRoundsAutoPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPrintGraphsToPDF))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdateStats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnResetGraphs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRunStats)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAutoUpdateGraphs, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblEveryUpdateGraphs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtUpdateGraphEveryXRounds, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblRoundsUpdateGraphs)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatsGraphController)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRunStats)
                    .addComponent(btnUpdateStats))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnResetGraphs)
                    .addComponent(btnAutoUpdateGraphs)
                    .addComponent(txtUpdateGraphEveryXRounds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEveryUpdateGraphs)
                    .addComponent(lblRoundsUpdateGraphs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrintGraphsToPDF)
                    .addComponent(btnAutoPrintGraphs)
                    .addComponent(txtPrintRoundsEveryXRounds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoundsAutoPrint)
                    .addComponent(lblEveryAutoPrint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAutoSaveStats)
                    .addComponent(lblEveryAutoSave)
                    .addComponent(txtSaveStatsEveryXRounds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoundsAutoSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAutoWriteData)
                    .addComponent(txtWriteDataEveryXRounds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEveryAutoWrite)
                    .addComponent(lblRoundsAutoWrite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAutoRunPeriodicMethod)
                    .addComponent(txtAutoRunMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEveryAutoRunMethod)
                    .addComponent(lblRoundsAutoRunMethod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDataCulling)
                    .addComponent(lblMaxEntries)
                    .addComponent(txtMaxCullingEntries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetGraphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetGraphsActionPerformed
        System.out.println(Statistics.PREFIX + "Reset all data series.");
        stats.resetDataSeries();
    }//GEN-LAST:event_btnResetGraphsActionPerformed

    private void btnUpdateStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStatsActionPerformed
        stats.step(true);
    }//GEN-LAST:event_btnUpdateStatsActionPerformed

    private void btnRunStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunStatsActionPerformed
        if(btnRunStats.isSelected()){
            System.out.println(Statistics.PREFIX + "Stats activated");
            stats.runStats(true);
        } else {
            System.out.println(Statistics.PREFIX + "Stats deactivated");
            stats.runStats(false);
        }
    }//GEN-LAST:event_btnRunStatsActionPerformed

    private void btnAutoUpdateGraphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoUpdateGraphsActionPerformed
        if(btnAutoUpdateGraphs.isSelected()){
            try{
                if(Integer.parseInt(txtUpdateGraphEveryXRounds.getText()) != -1){
                    stats.setChartUpdateFrequency(Integer.parseInt(txtUpdateGraphEveryXRounds.getText()));
                }
            } catch(NumberFormatException e){
                //leave the internal setting as it is
            }
            stats.updateStatsGraphs(true);
        } else {
            stats.updateStatsGraphs(false);
        }
    }//GEN-LAST:event_btnAutoUpdateGraphsActionPerformed

    private void btnPrintGraphsToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintGraphsToPDFActionPerformed
        stats.printAllGraphs();
    }//GEN-LAST:event_btnPrintGraphsToPDFActionPerformed
    
    private void btnAutoPrintGraphsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoPrintGraphsActionPerformed
        if(!btnAutoPrintGraphs.isSelected()){
            System.out.println(Statistics.PREFIX + "Auto-Printing of graphs deactivated");
            stats.setChartsAutoPrintFrequency(-1);
        } else {
            if(Integer.parseInt(txtPrintRoundsEveryXRounds.getText()) != -1){
                System.out.println(Statistics.PREFIX + "Auto-Printing of graphs activated (every " + Integer.parseInt(txtPrintRoundsEveryXRounds.getText()) + " rounds)");
            }
            try{
                stats.setChartsAutoPrintFrequency(Integer.parseInt(txtPrintRoundsEveryXRounds.getText()));
            } catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Ensure to only enter numeric values into 'Auto-Print' text field!", "Enter numeric value", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAutoPrintGraphsActionPerformed

    private void btnDataCullingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataCullingActionPerformed
        if(btnDataCulling.isSelected()){
        	try{
        		stats.activateDataCulling(true, Integer.parseInt(txtMaxCullingEntries.getText()));
        	} catch (NumberFormatException e){
	            JOptionPane.showMessageDialog(this, "Ensure to only enter numeric values into 'Data Culling' text field!", "Enter numeric value", JOptionPane.ERROR_MESSAGE);
	        }
        } else {
            stats.activateDataCulling(false, 0);
        }
    }//GEN-LAST:event_btnDataCullingActionPerformed

    private void btnAutoRunPeriodicMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoRunPeriodicMethodActionPerformed
        if(!btnAutoRunPeriodicMethod.isSelected()){
            System.out.println(Statistics.PREFIX + "Autorun of custom method deactivated");
            stats.RUN_CUSTOM_METHOD_EVERY_X_ROUNDS = -1;
        } else {
            if(Integer.parseInt(txtAutoRunMethod.getText()) != -1){
                System.out.println(Statistics.PREFIX + "Autorun of custom method deactivated (every " + Integer.parseInt(txtAutoRunMethod.getText()) + " rounds)");
            }
            try{
                stats.RUN_CUSTOM_METHOD_EVERY_X_ROUNDS = Integer.parseInt(txtAutoRunMethod.getText());
            } catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Ensure to only enter numeric values into 'Custom method' Auto-run text field!", "Enter numeric value", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAutoRunPeriodicMethodActionPerformed

    private void btnAutoSaveStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoSaveStatsActionPerformed
        if(!btnAutoSaveStats.isSelected()){
            System.out.println(Statistics.PREFIX + "Auto-Saving of stats deactivated");
            stats.setChartsAutoPrintFrequency(-1);
        } else {
            if(Integer.parseInt(txtSaveStatsEveryXRounds.getText()) != -1){
                System.out.println(Statistics.PREFIX + "Auto-Saving of stats activated (every " + Integer.parseInt(txtSaveStatsEveryXRounds.getText()) + " rounds)");
            }
            try{
                stats.SAVE_STATS_FORM_EVERY_X_ROUNDS = Integer.parseInt(txtSaveStatsEveryXRounds.getText());
            } catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Ensure to only enter numeric values into 'Auto-Save Stats Form' text field!", "Enter numeric value", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAutoSaveStatsActionPerformed

    private void btnAutoWriteDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoWriteDataActionPerformed
        if(!btnAutoWriteData.isSelected()){
            System.out.println(Statistics.PREFIX + "Auto-Writing of stats data deactivated");
            stats.COLLECT_DATA_EVERY_X_ROUNDS = -1;
        } else {
            if(Integer.parseInt(txtWriteDataEveryXRounds.getText()) != -1){
                System.out.println(Statistics.PREFIX + "Auto-Writing of stats data activated (every " + Integer.parseInt(txtWriteDataEveryXRounds.getText()) + " rounds)");
            }
            try{
                stats.COLLECT_DATA_EVERY_X_ROUNDS = Integer.parseInt(txtWriteDataEveryXRounds.getText());
            } catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Ensure to only enter numeric values into 'Auto-Write Data' text field!", "Enter numeric value", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAutoWriteDataActionPerformed

    private void txtPrintRoundsEveryXRoundsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrintRoundsEveryXRoundsKeyReleased
        btnAutoPrintGraphsActionPerformed(null);
    }//GEN-LAST:event_txtPrintRoundsEveryXRoundsKeyReleased

    private void txtSaveStatsEveryXRoundsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSaveStatsEveryXRoundsKeyReleased
        btnAutoSaveStatsActionPerformed(null);
    }//GEN-LAST:event_txtSaveStatsEveryXRoundsKeyReleased

    private void txtWriteDataEveryXRoundsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWriteDataEveryXRoundsKeyReleased
        btnAutoWriteDataActionPerformed(null);
    }//GEN-LAST:event_txtWriteDataEveryXRoundsKeyReleased

    private void txtAutoRunMethodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAutoRunMethodKeyReleased
        btnAutoRunPeriodicMethodActionPerformed(null);
    }//GEN-LAST:event_txtAutoRunMethodKeyReleased

    private void txtMaxCullingEntriesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaxCullingEntriesKeyReleased
        btnDataCullingActionPerformed(null);
    }//GEN-LAST:event_txtMaxCullingEntriesKeyReleased

    private void txtUpdateGraphEveryXRoundsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUpdateGraphEveryXRoundsKeyReleased
        btnAutoUpdateGraphsActionPerformed(null);
    }//GEN-LAST:event_txtUpdateGraphEveryXRoundsKeyReleased
    
    /**
     * Reflects eventual changes to the simulation configuration in the UI.
     */
    protected void checkForChangedSimulationSettings(){
    	if(stats.UPDATE_CHARTS_EVERY_X_ROUNDS != -1){
            this.txtUpdateGraphEveryXRounds.setText(stats.UPDATE_CHARTS_EVERY_X_ROUNDS.toString());
        }
        if(stats.PRINT_ALL_GRAPHS_EVERY_X_ROUNDS != -1){
    		//System.out.println("Print button should be true");
            btnAutoPrintGraphs.setSelected(true);
    	} else {
            btnAutoPrintGraphs.setSelected(false);
    	}
    	if(this.txtPrintRoundsEveryXRounds.getText().isEmpty()){
            this.txtPrintRoundsEveryXRounds.setText(stats.PRINT_ALL_GRAPHS_EVERY_X_ROUNDS.toString());
        }
        if(stats.SAVE_STATS_FORM_EVERY_X_ROUNDS != -1){
            //System.out.println("Print button should be true");
            btnAutoSaveStats.setSelected(true);
    	} else {
            btnAutoSaveStats.setSelected(false);
    	}
        if(this.txtSaveStatsEveryXRounds.getText().isEmpty()){
            this.txtSaveStatsEveryXRounds.setText(stats.SAVE_STATS_FORM_EVERY_X_ROUNDS.toString());
        }
        if(stats.COLLECT_DATA_EVERY_X_ROUNDS != -1){
            btnAutoWriteData.setSelected(true);
    	} else {
            btnAutoWriteData.setSelected(false);
    	}
        if(this.txtWriteDataEveryXRounds.getText().isEmpty()){
            this.txtWriteDataEveryXRounds.setText(stats.COLLECT_DATA_EVERY_X_ROUNDS.toString());
        }
        if(stats.RUN_CUSTOM_METHOD_EVERY_X_ROUNDS != -1){
            btnAutoRunPeriodicMethod.setSelected(true);
        } else {
            btnAutoRunPeriodicMethod.setSelected(false);
        }
        if(this.txtAutoRunMethod.getText().isEmpty()){
            this.txtAutoRunMethod.setText(stats.RUN_CUSTOM_METHOD_EVERY_X_ROUNDS.toString());
        }
        this.btnRunStats.setSelected(stats.runStatsActivated());
        this.btnAutoUpdateGraphs.setSelected(stats.updateStatsGraphsActivated());
        this.btnDataCulling.setSelected(stats.dataCullingActivated() != -1);
        this.txtMaxCullingEntries.setText(String.valueOf(stats.dataCullingActivated()));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAutoPrintGraphs;
    private javax.swing.JToggleButton btnAutoRunPeriodicMethod;
    private javax.swing.JToggleButton btnAutoSaveStats;
    private javax.swing.JToggleButton btnAutoUpdateGraphs;
    private javax.swing.JToggleButton btnAutoWriteData;
    private javax.swing.JToggleButton btnDataCulling;
    private javax.swing.JButton btnPrintGraphsToPDF;
    private javax.swing.JButton btnResetGraphs;
    private javax.swing.JToggleButton btnRunStats;
    private javax.swing.JButton btnUpdateStats;
    private javax.swing.JLabel lblEveryAutoPrint;
    private javax.swing.JLabel lblEveryAutoRunMethod;
    private javax.swing.JLabel lblEveryAutoSave;
    private javax.swing.JLabel lblEveryAutoWrite;
    private javax.swing.JLabel lblEveryUpdateGraphs;
    private javax.swing.JLabel lblMaxEntries;
    private javax.swing.JLabel lblRoundsAutoPrint;
    private javax.swing.JLabel lblRoundsAutoRunMethod;
    private javax.swing.JLabel lblRoundsAutoSave;
    private javax.swing.JLabel lblRoundsAutoWrite;
    private javax.swing.JLabel lblRoundsUpdateGraphs;
    private javax.swing.JLabel lblStatsGraphController;
    private javax.swing.JTextField txtAutoRunMethod;
    private javax.swing.JTextField txtMaxCullingEntries;
    private javax.swing.JTextField txtPrintRoundsEveryXRounds;
    private javax.swing.JTextField txtSaveStatsEveryXRounds;
    private javax.swing.JTextField txtUpdateGraphEveryXRounds;
    private javax.swing.JTextField txtWriteDataEveryXRounds;
    // End of variables declaration//GEN-END:variables
}
